def binary_gap(N):
    # Convert one digit to binary
    def int_to_binary(N):
        quotient = int(N/2)
        remainder = N % 2
        return quotient, remainder
    # Convert number to binary
    def int_to_binary_loop(N):
        binary_list = []
        N_new = N
        quotient, remainder = int_to_binary(N_new)
        binary_list.append(str(remainder))
        #print(f"{quotient}, {remainder}")
        while quotient > 0:
            N_new = quotient
            quotient, remainder = int_to_binary(N_new)
            binary_list.append(str(remainder))
            #print(f"{quotient}, {remainder}")
            N_new = quotient
        binary = ''.join(binary_list)
        return binary
    # Correct conversion from integer to binary
    def number_to_binary(N):
        binary_list = []
        N_new = N
        quotient = int(N_new/2)
        binary = 1 if N_new % 2 > 0 else 0
        #print(f"N_new: {N_new}, quotient: {quotient}, binary: {binary}")
        binary_list.append(str(binary))
        while quotient > 0:
            N_new = quotient
            quotient = int(N_new/2)
            binary = 1 if N_new % 2 > 0 else 0
            #print(f"N_new: {N_new}, quotient: {quotient}, binary: {binary}")
            binary_list.append(str(binary))
        # Sort in reverse order
        binary_sort = []
        for i in range((len(binary_list))-1, -1, -1):
            binary_sort.append(binary_list[i])
        # Unlist
        binary_unlist = ''.join(binary_sort)
        # Output
        return binary_unlist
        # Count number of consecutive zeros
    def binary_count(binary):
        counting = 0
        for i in range(0, len(binary)):
            if binary[i] == '0':
                counting += 1
                counting_zero = counting
            else:
                counting = 0
        try:
            return counting_zero
        except:
            return 0
    def binary_length(binary):
        gap_list = []
        counting = 0
        for i in binary:
            if i == '0':
                counting += 1
            else:
                gap_list.append(counting)
                counting = 0
        return max(gap_list)
    # Perform binary search
    #binary = int_to_binary_loop(N)
    binary = number_to_binary(N)
    counting = binary_length(binary)
    return counting
